{
  "Redux component - State Props": {
    "prefix": "rdxs",
    "body": [
      "import * as React from 'react';",
      "import { connect } from 'react-redux';",
      "",
      "interface OwnProps {}",
      "",
      "interface StateProps {",
        "\t//",
      "}",
      "",
      "interface ${1:ComponentName}Props",
        "\textends React.HTMLProps<HTMLElement>,",
          "\t\tOwnProps,",
          "\t\tStateProps {}",
      "export const $1: React.SFC<$1Props> = () => (",
        "\t$0",
      ");",
      "",
      "const mapStateToProps = (state: ${2:StateName}): StateProps => ({",
        "\t//",
      "});",
      "",
      "const wrapped = connect<StateProps, {}, OwnProps, $2>(",
        "\tmapStateToProps",
      ")($1);",
      "",
      "export default wrapped;",
      "",
    ],
    "description": "Boilerplate for a React component with only State props",
  },

  "Redux component - Dispatch Props": {
    "prefix": "rdxd",
    "body": [
      "import * as React from 'react';",
      "import { connect } from 'react-redux';",
      "import { Dispatch } from 'redux';",
      "",
      "interface OwnProps {}",
      "",
      "interface DispatchProps {",
        "\t//",
      "}",
      "",
      "interface ${1:ComponentName}Props",
        "\textends React.HTMLProps<HTMLElement>,",
          "\t\tOwnProps,",
          "\t\tDispatchProps {}",
      "export const $1: React.SFC<$1Props> = () => (",
        "\t$0",
      ");",
      "",
      "const mapDispatchToProps = (dispatch: Dispatch): DispatchProps => ({",
        "\t//",
      "});",
      "",
      "const wrapped = connect<{}, DispatchProps, OwnProps>(",
        "\tnull,",
        "\tmapDispatchToProps",
      ")($1);",
      "",
      "export default wrapped;",
      "",
    ],
    "description": "Boilerplate for a React component with only Dispatch props",
  },

  "Redux component - State & Dispatch Props": {
    "prefix": "rdxsd",
    "body": [
      "import * as React from 'react';",
      "import { connect } from 'react-redux';",
      "import { Dispatch } from 'redux';",
      "",
      "interface OwnProps {}",
      "",
      "interface StateProps {",
        "\t//",
      "}",
      "",
      "interface DispatchProps {",
        "\t//",
      "}",
      "",
      "interface ${1:ComponentName}Props",
        "\textends React.HTMLProps<HTMLElement>,",
          "\t\tOwnProps,",
          "\t\tStateProps,",
          "\t\tDispatchProps {}",
      "export const $1: React.SFC<$1Props> = () => (",
        "\t$0",
      ");",
      "",
      "const mapStateToProps = (state: ${2:StateName}): StateProps => ({",
        "\t//",
      "});",
      "",
      "const mapDispatchToProps = (dispatch: Dispatch): DispatchProps => ({",
        "\t//",
      "});",
      "",
      "const wrapped = connect<StateProps, DispatchProps, OwnProps, $2>(",
        "\tmapStateToProps,",
        "\tmapDispatchToProps",
      ")($1);",
      "",
      "export default wrapped;",
      "",
    ],
    "description": "Boilerplate for a React component with State and Dispatch props",
  },

  "Module block comment": {
    "prefix": "mod",
    "body": [
      "/**",
      " * @module $1",
      " * @category $2",
      " */",
      "$0",
    ],
  },

  "Component Class": {
    "prefix": "trc",
    "body": [
      "import * as React from 'react';",
      "",
      "import './$1.scss';",
      "",
      "export interface $1Props extends React.HTMLProps<HTMLElement> {}",
      "export interface $1State {}",
      "",
      "export class $1 extends React.Component<$1Props, $1State> {",
      "  public render(): JSX.Element {",
      "    return (<div>Hello $1$0</div>);",
      "  }",
      "}",
      "",
      "export default $1;",
      ""
    ],
    "description": "Create a basic React component class"
  },

  "Functional Component": {
    "prefix": "trf",
    "body": [
      "import * as React from 'react';",
      "",
      "export interface $1Props extends React.HTMLProps<HTMLElement> {",
      "  ",
      "}",
      "",
      "/**",
      " * $0",
      " * ",
      " * _Copyright (c) 2018, Q-Free Open Roads_",
      " */",
      "export const $1 = ({}: $1Props) => (",
      "  <div>$1</div>",
      ");",
      "",
      "export default $1;",
      ""
    ],
    "description": "A stateless, functional React Component"
  },

  "Lifecycle Hooks": {
    "prefix": "trl",
    "body": [
      "componentWillMount() { }",
      "componentDidMount() { }",
      "componentWillReceiveProps(nextProps) { }",
      "shouldComponentUpdate(nextProps, nextState) { }",
      "componentWillUpdate(nextProps, nextState) { }",
      "componentDidUpdate(prevProps, prevState) { }",
      "componentWillUnmount() { }",
      ""
    ],
    "description": "React Component Lifecycle Hooks"
  },

  "Click Handler Type": {
    "prefix": "click",
    "body": [
      "import { EventHandler, MouseEvent } from 'react';",
      "EventHandler<MouseEvent<HTMLElement>>;"
    ],
    "description": "Import statement and type definition for a React Click handler"
  },

  "Test Boilerplate": {
    "prefix": "trt",
    "body": [
      "import * as React from 'react';",
      "import * as renderer from 'react-test-renderer';",
      "import { shallow } from 'enzyme';",
      "",
      "import { $1 } from './$1';",
      "",
      "test('$1 $2', () => {",
      "  $0",
      "});",
      ""
    ],
    "description": "Starter for Jest test"
  },

  // "Redux Epic Boilerplate": {
  //   "prefix": "epic",
  //   "body": [
  //     "import { $1 } from 'otms-types';",
  //     "import { ActionsObservable, combineEpics } from 'redux-observable';",
  //     "import { Observable } from 'rxjs';",
  //     "import { Action, /** Action Creator Factory */ $2, /** REST API URL Generator */$3 } from 'otms-ui-common';",
  //     "import { OtmsAjax } from 'otms-ui-common/rest/OtmsAjax';",
  //     "import 'rxjs/add/operator/catch';",
  //     "import 'rxjs/add/operator/filter';",
  //     "import 'rxjs/add/operator/map';",
  //     "import 'rxjs/add/operator/mapTo';",
  //     "import 'rxjs/add/operator/mergeMap';",
  //     "",
  //     "",
  //     "// This line waits until an action is dispatched to the store before being kicked off.",
  //     "export const $4 = (action$: ActionsObservable<Action>) => action$.ofType(/** Action to trigger*/$2$3)",
  //     "  .mergeMap(action => {",
  //     "    const url = /** REST API URL Generator */$3(action.payload);",
  //     "    return OtmsAjax.getJSON(url)",
  //     "      .map(json => {'",
  //     "        // dispatching action",
  //     "        return /** Action to kick off */$2$3(json as $1); })",
  //     "      .catch(error => {",
  //     "        // If Error, do this",
  //     "        return Observable.of({",
  //     "          type: 'LCS_FETCH_ERROR',",
  //     "          payload: error.xhr.response,",
  //     "          error: true",
  //     "        });",
  //     "      });",
  //     "  });",
  //     "export const $5 = combineEpics(",
  //     "  $4",
  //     ");",
  //     "export default $5;"
  //   ],
  //   "description":
  //     "An Epic is a Redux store listener that waits for actions to be kicked off. From this point you can do anything, but this boilerplate assumes that you're going to be doing some REST calls"
  // }
}
