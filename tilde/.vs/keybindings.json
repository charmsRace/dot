[
  // all - "key": "[^"]*?"
  // chords - "key": "[^" ]+ [^" ]+"
  // taken alt menu keys: [wertsdfgklcvbm]

  /**
   * ctrl: ⎈
   * shift: ⇧
   * alt: ⎇
   * meta: ◆
   */

  /**
   * swap tab navigation behavior
   * ctrl+tab <-> ctrl+pagedown
   * ctrl+shift+tab <-> ctrl+pageup
   */

  {
    "key": "ctrl+tab",
    "command": "workbench.action.nextEditor",
  },
  {
    "key": "ctrl+shift+tab",
    "command": "workbench.action.previousEditor",
  },
  {
    "key": "ctrl+pageup",
    "command": "workbench.action.openPreviousRecentlyUsedEditorInGroup",
  },
  {
    "key": "ctrl+pagedown",
    "command": "workbench.action.openNextRecentlyUsedEditorInGroup",
  },
  {
    "key": "ctrl+,",
    "command": "workbench.action.openSettingsJson",
  },
  {
    "key": "ctrl+f5",
    "command": "workbench.action.reloadWindow",
    "when": "editorTextFocus",
  },
  {
    "key": "ctrl+alt+n",
    "command": "explorer.newFile",
  },
  {
    "key": "ctrl+shift+alt+n",
    "command": "explorer.newFolder",
  },
  {
    "key": "ctrl+alt+r",
    "command": "workbench.files.action.refreshFilesExplorer",
  },
  {
    "key": "ctrl+k t",
    "command": "workbench.action.tasks.terminate",
    "args": "terminateAll",
  },
  {
    "key": "ctrl+k ctrl+shift+o",
    "command": "addRootFolder",
  },

  /**
   * alt + ...
   */

  {
    "key": "alt+`",
    "command": "workbench.action.terminal.kill",
  },

  /**
   * Whitespace settings chord system
   * alt + q -> ...
   *
   * q - indentationToSpaces
   * a - indentUsingSpaces
   * w - indentationToTabs
   * s - indentUsingTabs
   * e - detectIndentation
   * r - reindentLines
   * x - trimTrailingWhitespace
   */

  /**
   * Explorer chord system
   * shift + alt + e -> ...
   *   - q - focus open editors
   *   - a - focus folders
   *   - z - focus outline
   *
   */

  {
    "key": "shift+alt+e q",
    "command": "workbench.files.action.focusOpenEditorsView",
    "when": "workbench.explorer.openEditorsView.active",
  },
  {
    "key": "shift+alt+e a",
    "command": "workbench.explorer.fileView.focus",
    // "when": "",
  },
  {
    "key": "shift+alt+e z",
    "command": "outline.focus",
    // "when": "",
  },

  {
    "key": "alt+q q",
    "command": "editor.action.indentationToSpaces",
    "when": "editorTextFocus && !editorReadonly",
  },
  {
    "key": "alt+q a",
    "command": "editor.action.indentUsingSpaces",
    "when": "editorTextFocus && !editorReadonly",
  },
  {
    "key": "alt+q w",
    "command": "editor.action.indentationToTabs",
    "when": "editorTextFocus && !editorReadonly",
  },
  {
    "key": "alt+q s",
    "command": "editor.action.indentUsingTabs",
    "when": "editorTextFocus && !editorReadonly",
  },
  {
    "key": "alt+q e",
    "command": "editor.action.detectIndentation",
    "when": "editorTextFocus && !editorReadonly",
  },
  {
    "key": "alt+q r",
    "command": "editor.action.reindentlines",
    "when": "editorTextFocus && !editorReadonly",
  },
  {
    "key": "alt+q x",
    "command": "editor.action.trimTrailingWhitespace",
    "when": "editorTextFocus && !editorReadonly",
  },

  /**
   * TODO: make chords?
   * ctrl + alt + ...
   */

  {
    "key": "ctrl+alt+a",
    "command": "editor.action.revealDefinition",
    "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor",
  },
  {
    "key": "ctrl+alt+s",
    "command": "references-view.findReferences",
    "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor",
  },
  {
    "key": "ctrl+alt+d",
    "command": "editor.action.goToTypeDefinition",
    "when": "editorHasTypeDefinitionProvider && editorTextFocus && !isInEmbeddedEditor",
  },
  {
    "key": "ctrl+alt+f",
    "command": "search.action.openNewEditor",
  },
  {
    "key": "ctrl+alt+j",
    "command": "editor.action.joinLines",
    "when": "editorTextFocus && !editorReadonly",
  },
  {
    "key": "ctrl+alt+/",
    "command": "editor.action.blockComment",
    "when": "editorTextFocus && !editorReadonly",
  },
  {
    "key": "ctrl+alt+u",
    "command": "insert-unicode.insertText",
    "when": "editorTextFocus && !editorReadonly",
  },
  {
    "key": "ctrl+alt+i",
    "command": "insert-unicode.fromHexCode",
    "when": "editorTextFocus && !editorReadonly",
  },
  {
    "key": "ctrl+alt+0",
    "command": "workbench.action.evenEditorWidths",
  },

  /**
   * Folding chords
   * (cf. https://code.visualstudio.com/docs/editor/codebasics#_folding)
   *
   * fold
   * foldAll
   * foldAllBlockComments
   * foldLevelN [1-7]
   * foldRecursively
   *
   * toggleFold
   *
   * unfold
   * unfoldAll
   * unfoldRecursively
   */

  // {
    // "key": "",
    // "command": "editor.",
    // "when": "editorTextFocus && foldingEnabled",
  // },

  /**
   * Layout management chord system
   * shift + alt + q -> ...
   *
   * q - workbench.action.editorLayoutSingle
   * w - workbench.action.editorLayoutTwoColumns
   * e - workbench.action.editorLayoutThreeColumns
   * d - workbench.action.editorLayoutTwoRowsRight
   * a - workbench.action.editorLayoutTwoRows
   * z - workbench.action.editorLayoutThreeRows
   * x - workbench.action.editorLayoutTwoColumnsBottom
   * c - workbench.action.editorLayoutTwoByTwoGrid
   * s - workbench.action.maximizeEditor
   * r - workbench.action.evenEditorWidths
   * TODO: ? - center layout
   *
   * ←↑→↓ - workbench.action.moveActiveEditorGroup{Left,Up,Right,Down}
   * enter - workbench.action.{un,}pinEditor
   * tab - workbench.action.firstEditorInGroup
   * TODO: can we detect when first editor is active, so tab can switch back?
   */

  {
    "key": "shift+alt+q q",
    "command": "workbench.action.editorLayoutSingle",
  },
  {
    "key": "shift+alt+q w",
    "command": "workbench.action.editorLayoutTwoColumns",
  },
  {
    "key": "shift+alt+q e",
    "command": "workbench.action.editorLayoutThreeColumns",
  },
  {
    "key": "shift+alt+q a",
    "command": "workbench.action.editorLayoutTwoRows",
  },
  {
    "key": "shift+alt+q z",
    "command": "workbench.action.editorLayoutThreeRows",
  },
  {
    "key": "shift+alt+q d",
    "command": "workbench.action.editorLayoutTwoRowsRight",
  },
  {
    "key": "shift+alt+q x",
    "command": "workbench.action.editorLayoutTwoColumnsBottom",
  },
  {
    "key": "shift+alt+q c",
    "command": "workbench.action.editorLayoutTwoByTwoGrid",
  },
  {
    "key": "shift+alt+q s",
    "command": "workbench.action.maximizeEditor",
  },
  {
    "key": "shift+alt+q r",
    "command": "workbench.action.evenEditorWidths",
  },
  {
    "key": "shift+alt+q left",
    "command": "workbench.action.moveActiveEditorGroupLeft",
  },
  {
    "key": "shift+alt+q up",
    "command": "workbench.action.moveActiveEditorGroupUp",
  },
  {
    "key": "shift+alt+q right",
    "command": "workbench.action.moveActiveEditorGroupRight",
  },
  {
    "key": "shift+alt+q down",
    "command": "workbench.action.moveActiveEditorGroupDown",
  },
  {
    "key": "shift+alt+q enter",
    "command": "workbench.action.pinEditor",
    "when": "config.workbench.editor.showTabs && !editorSticky"
  },
  {
    // doesn't work
    "key": "shift+alt+q enter",
    "command": "workbench.action.unpinEditor",
    "when": "config.workbench.editor.showTabs && editorSticky"
  },
  {
    "key": "shift+alt+q tab",
    "command": "workbench.action.firstEditorInGroup",
  },
  {
    "key": "shift+alt+q down",
    "command": "workbench.action.closeOtherEditors",
  },
  {
    "key": "shift+alt+q left",
    "command": "workbench.action.closeEditorsToTheLeft",
  },
  {
    "key": "shift+alt+q right",
    "command": "workbench.action.closeEditorsToTheRight",
  },


  /**
   * Tree navigation?
   *
   * {
   *   "key": "ctrl+left",
   *   "command": "list.collapseAll",
   *   "when": "listFocus && !inputFocus"
   * },
   */

  /**
   * Focus navigation chord system
   * shift + alt + <key> -> ...
   *   - workbench.action.focusSideBar
   *   - workbench.files.action.focusOpenEditorsView
   *   - workbench.files.action.focusFilesExplorer
   *   - workbench.view.search.focus
   *   - extensions.listView.focus
   *   - workbench.action.focusPanel
   *   - workbench.action.problems.focus
   *   - workbench.action.terminal.focus
   *   - breadcrumbs.focus
   *   - outline.focus
   *   - notifications.focusToasts
   *   - workbench.action.focusCommentsPanel
   *   - workbench.action.focusQuickOpen
   *
   * Regex to find all focus commands in `default-keybindings.json`:
   * `\.[^.]*?focus`
   */

  /**
   * shift + alt + ...
   */

  {
    "key": "shift+alt+d",
    "command": "search.action.focusNextSearchResult",
    "when": "hasSearchResult || inSearchEditor",
  },
  {
    "key": "shift+alt+e",
    "command": "search.action.focusPreviousSearchResult",
    "when": "hasSearchResult || inSearchEditor",
  },
  // {
  //   "key": "shift+alt+d",
  //   "command": "references-view.next",
  //   "when": "reference-list.hasResult && references-view.canNavigate",
  // },
  // {
  //   "key": "shift+alt+e",
  //   "command": "references-view.prev",
  //   "when": "reference-list.hasResult && references-view.canNavigate",
  // },
  {
    "key": "shift+alt+s",
    "command": "editor.action.insertSnippet",
    "when": "editorTextFocus && !editorReadonly",
  },

  /**
   * Remap smart selection because subword navigation
   * extension uses `shift+alt+{left,right}`
   */
  {
    "key": "ctrl+shift+up",
    "command": "editor.action.smartSelect.expand",
    "when": "editorTextFocus",
  },
  {
    "key": "ctrl+shift+down",
    "command": "editor.action.smartSelect.shrink",
    "when": "editorTextFocus",
  },

  {
    "key": "ctrl+shift+alt+enter",
    "command": "macros.insertLinesAround",
  },

  // {
  //   "key": "ctrl+shift+enter",
  //   "command": "-markdown-preview-enhanced.runAllCodeChunks",
  //   "when": "editorLangId == 'markdown'",
  // },

  /**
   * TODO: Set up chord system for opening
   * VS Code configuration files
   */

  // Settings
  {
    "key": "ctrl+k ctrl+,",
    "command": "workbench.action.openSettingsJson"
  },
  {
    "key": "ctrl+k ctrl+shift+,",
    "command": "workbench.action.openRawDefaultSettings",
  },
  {
    "key": "ctrl+k ctrl+alt+,",
    "command": "workbench.action.openSettings"
  },

  // Keybindings
  {
    "key": "ctrl+k ctrl+.",
    "command": "workbench.action.openGlobalKeybindingsFile",
  },
  {
    "key": "ctrl+k ctrl+shift+.",
    "command": "workbench.action.openDefaultKeybindingsFile",
  },
  {
    "key": "ctrl+k ctrl+alt+.",
    "command": "workbench.action.openGlobalKeybindings"
  },

  // Configure snippets
  {
    "key": "ctrl+k ctrl+s",
    "command": "workbench.action.openSnippets",
  },

// - keybindings.editor.copyCommandKeybindingEntry
// - keybindings.editor.resetKeybinding
// - keybindings.editor.showConflicts
// - keybindings.editor.showDefaultKeybindings
// - keybindings.editor.showUserKeybindings

  // {
  //   "key": "shift+alt+<key> <key>",
  //   "command": "vscode.open",
  //   "args": {
  //     "text": "C:\\Users\\joruble\\git\\dot\\sources\\augr\\.vs\\keybindings.json"
  //   },
  // },

  // Test command
  // {
  //   "key": "ctrl+shift+alt+x",
  //   "command": "workbench.action.focusQuickOpen",
  // },

  /**
   * TODO: Unsorted changes
   */

  {
    "key": "ctrl+shift+c",
    "command": "extension.copyProjectPath",
    // "when": "editorFocus",
  },
]

// TODO: regex to find relevant JSON lines without trailing comma
// TODO: terminal paning?
